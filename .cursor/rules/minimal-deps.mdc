---
description: 
globs: 
alwaysApply: true
---
---
# Meta‑données (Front‑matter)
description: Enforce minimal‑dependency architecture for WebExtractor CLI in Go
alwaysApply: true           # Rule de type **Always** — incluse partout
# globs optionnel : ici on l’applique sur tout le code Go
# globs: ["*.go"]
---
# Règles (interprétées comme "system prompt")

- **Langage** : Go 1.22.
- **Dépendances autorisées uniquement** :
  - Standard library (net/http, encoding/json, flag, etc.).
  - `golang.org/x/net/html` → parseur HTML.
  - `golang.org/x/term` → _optionnel_ pour le mode TUI.
  - _Interdiction formelle_ d’importer : cobra, goquery, promptui, bubbletea, pflag, etc.
- **Parsing des flags** : utiliser `flag` (stdlib) — pas de Cobra.
- **HTTP** : `net/http` avec timeout + User‑Agent custom "WebExtractor/0.1".
- **Parsing HTML** : API bas niveau de `x/net/html` + sélecteurs faits maison (tag, .class, #id).
- **Mode interactif (no‑code)** :
  1. Si l’option `-sel` est absente, construire la liste numérotée des nœuds (max 15 par page).
  2. Afficher via simple ANSI ; si besoin de touches, passer le terminal en _raw_ (`x/term`).
  3. Lire des indices/plages (`0,2,6-9`) et générer la liste des sélecteurs avant extraction.
- **Architecture** :
  - `main.go` = orchestration seulement.
  - Packages internes : `internal/fetcher`, `internal/parser`, `internal/tui`, `internal/io`.
- **Qualité** :
  - Couverture tests ≥ 80 % (`go test -cover`).
  - Zéro avertissement `go vet`.
  - `go fmt` obligatoire.
- **Sortie JSON** : indentation 2 espaces, clefs `url`, `results[] {selector, matches}`.
- **Pas de code généré dynamique** (`go generate`) ni de réflexion complexe.
